package smap

type Smap struct {
	Method  string
	Key     any
	Value   any
	DataMap map[any]any

	SmapCh chan *Smap
	TxCh   chan any
}

type KeyValuePair struct {
	Key   any
	Value any
}

func NewSmap() *Smap {
	obj := &Smap{
		Method:  "",
		DataMap: make(map[any]any),
		SmapCh:  make(chan *Smap),
		TxCh:    make(chan any),
	}
	go obj.schedule()
	return obj
}

func (s *Smap) schedule() {
	for obj := range s.SmapCh {
		switch obj.Method {
		case "Set":
			s.set(obj.Key, obj.Value)
		case "Delete":
			s.delete(obj.Key)
		case "Get":
			s.get(obj.Key, obj.TxCh)
		case "Iter":
			s.iter(obj.TxCh)
		case "Len":
			s.len(obj.TxCh)
		}
	}
}

func (s *Smap) Set(k, v any) {
	Set := NewSmap()
	Set.Method = "Set"
	Set.Key = k
	Set.Value = v
	s.SmapCh <- Set
}
func (s *Smap) set(k, v any) {
	s.DataMap[k] = v
}

func (s *Smap) Delete(k any) {
	Delete := NewSmap()
	Delete.Method = "Delete"
	Delete.Key = k
	s.SmapCh <- Delete
}
func (s *Smap) delete(k any) {
	delete(s.DataMap, k)
}

func (s *Smap) Get(k any) any {
	Get := NewSmap()
	Get.Method = "Get"
	Get.Key = k
	s.SmapCh <- Get
	v := <-Get.TxCh
	return v
}
func (s *Smap) get(k any, TxCh chan any) {
	v, ok := s.DataMap[k]
	if !ok {
		TxCh <- nil
	} else {
		TxCh <- v
	}
}

func (s *Smap) Iter(IterCh chan any) {

	Iter := NewSmap()
	Iter.Method = "Iter"
	s.SmapCh <- Iter
	go func() {
		for elt := range Iter.TxCh {
			IterCh <- elt
		}
		close(IterCh)
	}()
}
func (s *Smap) iter(TxCh chan any) {
	for k, v := range s.DataMap {
		TxCh <- &KeyValuePair{Key: k, Value: v}
	}
	close(TxCh)
}

func (s *Smap) Len() int {
	Len := NewSmap()
	Len.Method = "Len"
	s.SmapCh <- Len
	length := <-Len.TxCh
	lengthInt := length.(int)
	return lengthInt
}
func (s *Smap) len(TxCh chan any) {
	TxCh <- len(s.DataMap)
}
